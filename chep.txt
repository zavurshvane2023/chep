-------------------------------------------------------------
BACKEND
-------------------------------------------------------------

web/NewsController.java
--------------------------------------------------------------
package com.vscpi.project.web;

import com.vscpi.project.repository.NewsRepository;
import com.vscpi.project.model.News;

import java.util.Collections;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PathVariable;

// Controller for news
@RestController("/news")
public class NewsController {
    @Autowired
    private NewsRepository newsRepository;

    // Get all news for an event
    @GetMapping("/news/{eventId}")
    public java.util.List<News> getNews(@PathVariable Long eventId) {
        return newsRepository.findByEventId(eventId);
    }

    // Get all news
    @GetMapping("/news")
    public java.util.List<News> getAllNews() {
        return newsRepository.findAll();
    }

    // Create a news
    @PostMapping("/news")
    public News createNews(@RequestBody News news) {
        return newsRepository.save(news);
    }
}

repository/NewsRepository.java
----------------------------------------
package com.vscpi.project.repository;

import com.vscpi.project.model.News;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

// Repository for news
@Repository
public interface NewsRepository extends JpaRepository<News, Long> {
    List<News> findByEventId(Long eventId);
}


model/News.java
-----------------------------------------------------
package com.vscpi.project.model;

import jakarta.persistence.Id;
import jakarta.persistence.Entity;
import javax.persistence.Table;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import javax.persistence.Column;

// Model for news
@Entity
public class News {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "title", nullable = false, unique = true)
    private String title;

    @Column(name="date", nullable = false)
    private String date;

    @Column(name = "content", nullable = false)
    private String content;

    @Column(name = "image", nullable = false)
    private String image;

    @Column(name="event_id", nullable = false)
    private Long eventId;

    public News() {
    }

    public News(String title, String content) {
        this.title = title;
        this.content = content;
    }

    public News(Long id, String title, String content) {
        this.id = id;
        this.title = title;
        this.content = content;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

     public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

     public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getImage() {
    	return image;
    }

    public void setImage(String image) {
    	this.image = image;
    }

    public Long getEventId() {
    	return eventId;
    }

    public void setEventId(Long eventId) {
    	this.eventId = eventId;
    }

    public String getDate() {
    	return date;
    }

    public void setDate(String date) {
    	this.date = date;
    }
}

-------------------------------------------------------
FRONTEND
-------------------------------------------------------

pages/news.page.tsx
------------------------------------------
import styled from "styled-components";

import { useState, useEffect } from "react";

import NewsService from "@app/services/news.service";
import { INews } from "@app/types/IEvent";
import { Button, StyledLink } from "@app/styles/common.style";

const EventsPageContainer = styled.div`
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
	
	gap: 1rem;
	
	width: 100vw;
	height: 100vh;
`;

const EventContainer = styled.div`
	display: flex;
	flex-direction: row;
 	align-items: center;
  
  	width: 600px;
`;

const TextContainer = styled.div`
	display: flex;
	flex-direction: column;
  
  	margin-left: 1rem;
  
`;

export const NewsPage = (): JSX.Element => {
	const [news, setNews] = useState<INews[]>([]);

	const [facetDate, setFacetDate] = useState("");

	useEffect(() => {
		NewsService.get()
			.then(res => {
				setNews(res);
			})
			.catch(console.error);
	}, []);

	useEffect(() => {
		if (facetDate === "") {
			NewsService.get()
				.then(res => {
					setNews(res);
				})
				.catch(console.error);
		} else {
			setNews(news.filter((event) => {
				return event.date.includes(facetDate);
			}));
		}
		}, [facetDate]);

	return (
		<EventsPageContainer>
			<div>
				<label htmlFor="date">Date </label>
				<input style={{ marginRight: "1rem" }} type="date" name="date" id="date" value={facetDate} onChange={(e) => setFacetDate(e.target.value)} />

				<Button>Filter</Button>
			</div>

			{news.slice(0, 5).map(event => {
				return (
					<EventContainer key={event.id}>
						<img src={event.image} alt={event.title} width={"250px"} />
						<TextContainer>
							<h1>{event.title}</h1>
							<p>{event.content}</p>
						</TextContainer>
						<TextContainer>
							<p>{event.date}</p>
						</TextContainer>
					</EventContainer>
				);
			})}
		</EventsPageContainer>
	);
};


pages/createNews.page.tsx
----------------------------------------
import { useState } from "react";
import styled from "styled-components";
import { useNavigate } from "react-router-dom";

import NewsService from "@app/services/news.service";
import { Button } from "@app/styles/common.style";

const CenteredContainer = styled.div`
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
  
  	width: 100vw;
  	height: 100vh;
	
	gap: 1rem;
`;

export const CreateNewsPage = (): JSX.Element => {
	const navigate = useNavigate();

	const [title, setTitle] = useState("");
	const [content, setContent] = useState("");
	const [date, setDate] = useState("");
	const [eventId, setEventId] = useState("");
	const [image, setImage] = useState("");
	const onSubmit = (): void => {
		NewsService.create(title, content, date, image, eventId)
			.then(res => {
				navigate("/events");
			})
			.catch(console.error);
	};

	return (
		<CenteredContainer>
			<label htmlFor="name">Title</label>
			<input
				type="text"
				id="name"
				value={title}
				onChange={(e) => setTitle(e.target.value)}
			/>

			<label htmlFor="description">Content</label>
			<input
				type="text"
				id="description"
				value={content}
				onChange={(e) => setContent(e.target.value)}
			/>

			<label htmlFor="date">Date</label>
			<input
				type="date"
				id="date"
				value={date}
				onChange={(e) => setDate(e.target.value)}
			/>

			<label htmlFor="eventId">Event ID</label>
			<input
				type="text"
				id="eventId"
				value={eventId}
				onChange={(e) => setEventId(e.target.value)}
			/>

			<label htmlFor="image">Image</label>
			<input
				type="text"
				id="image"
				value={image}
				onChange={(e) => setImage(e.target.value)}
			/>

			<Button type="submit" onClick={onSubmit}>Create</Button>
		</CenteredContainer>
	);
};


services/news.service.ts
---------------------------------------
import Http from "@app/request";

import { IEvent, INews } from "@app/types/IEvent";


export default class NewsService {

	static async get(): Promise<INews[]> {
		return await Http.get(`@api/news`).then(data => data as unknown as INews[]);
	}
	static async list(eventId: number): Promise<INews[]> {
		return await Http.get(`@api/news/${eventId}`, ).then(data => data as unknown as INews[]);
	}

	static async create(title: string, content: string, date: string, image: string, eventId: string): Promise<boolean> {
		return await Http.post(`@api/news`, { title, content, image, date, eventId }).then(data => data as unknown as boolean);
	}

}

model/Users.java
------------------------------------------
package com.vscpi.project.model;

import jakarta.persistence.Id;
import jakarta.persistence.Entity;
import javax.persistence.Table;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import javax.persistence.Column;

// Model for users
@Entity
public class Users {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "username", nullable = false, unique = true)
    private String username;

    @Column(name = "email", nullable = false)
    private String email;

    @Column(name = "password", nullable = false)
    private String password;

    @Column(name = "permission_id", nullable = false)
    private Long permissionId = 1L;

    public Users() {
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

     public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

     public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Long getPermissionId() {
        return permissionId;
    }

    public void setPermissionId(Long permissionId) {
        this.permissionId = permissionId;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}

web/UserController
-----------------------------
package com.vscpi.project.web;

import com.vscpi.project.repository.UserRepository;
import com.vscpi.project.model.Users;

import java.util.Collections;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.Map;


@RestController
public class UserController {
    @Autowired
    private UserRepository userRepository;

    @Value("${jwt.secret}")
    private String jwtSecret;

    // Register a user
    @PostMapping("/register")
    public Users register(@RequestBody Users user) {
        user.setPassword(org.apache.commons.codec.digest.DigestUtils.sha256Hex(user.getPassword()));
        return userRepository.save(user);
    }

    // Login a user
    @PostMapping("/login")
    public Map login(@RequestBody Users user) {
        System.out.println(user.getPassword());
        user.setPassword(org.apache.commons.codec.digest.DigestUtils.sha256Hex(user.getPassword()));

        System.out.println(user.getPassword());

        // find if a user with this username and password exists
        Users existingUser = userRepository.findByUsernameAndPassword(user.getUsername(), user.getPassword());

        if (existingUser == null) {
            return null;
        } else {
            String token = Jwts.builder()
                    .setSubject(existingUser.getUsername())
                    .signWith(SignatureAlgorithm.HS512, jwtSecret)
                    .setExpiration(new java.util.Date(System.currentTimeMillis() + 1000 * 60 * 60))
                    .compact();

            return new java.util.HashMap<String, Object>() {{
                    put("user", existingUser);
                    put("token", token);
            }};
        }
    }

    // Get all users
    @GetMapping("/users")
    public Iterable<Users> getUsers() {
        return userRepository.findAll();
    }

    // Update a user
    @PostMapping("/users/{id}")
    public Users updateUser(@RequestBody Map<String, String> body, @PathVariable Long id) {
        Users user = userRepository.findById(id).orElse(null);

        if (body.get("email") != null) {
            user.setEmail(body.get("email"));
        }

        if (body.get("permissionId") != null) {
            user.setPermissionId(Long.parseLong(body.get("permissionId")));
        }

        return userRepository.save(user);
    }

    // Delete a user
    @DeleteMapping("/users/{id}")
    public boolean deleteUser(@PathVariable Long id) {
        userRepository.deleteById(id);
        return true;
    }
}